<?php
try {
ini_set("log_errors", 1);

setlocale(LC_TIME, 'fr_FR');
error_reporting(E_ALL);
//ini_set("display_errors", 1);
ini_set("error_log", "log.log");


/*
////////////////////
require_once("../phpfastcache/phpfastcache.php");

// simple Caching with:
$cache = phpFastCache();

// Try to get $products from Caching First
// product_page is "identity keyword";
$thisurl=$_SERVER["REQUEST_URI"];
$wikicached=true;
$blogcached=true;
$othercached=false;
$pagetoserve=null;
$pagetoserve = $cache->get($thisurl);
$result="";
//si on doit cacher le wiki



if((strstr($thisurl, '/index.php?title='))&& $wikicached==true)
	{
	//si on edite le wiki, flush wikicache
	if ((strstr($thisurl, 'edit')) OR (strstr($thisurl, ':Ajouter')))
		{
		$cache->clean();;
		}




	//sinon on sert un page caché
	else
		{
		if($pagetoserve==null)
			{
//echo "buildcache...";
$curl = curl_init($thisurl);
//curl_setopt($curl, CURLOPT_NOBODY, true);
$pagetoserve = curl_exec($curl);
//set_time_limit(ini_get('max_execution_time'));
curl_close($curl);
			$cache->set($pagetoserve,$thisurl , 600);
//echo $pagetoserve;

//exit;

			}
			
else {
//echo "render cache...";
			echo $pagetoserve;
exit;

			
		}

	}

}

*/
/////////////////////////////////











$wgSpamRegex = "/".                        # The "/" is the opening wrapper
                "s-e-x|zoofilia|sexyongpin|grusskarte|geburtstagskarten|animalsex|".
                "sex-with|dogsex|adultchat|adultlive|camsex|sexcam|livesex|sexchat|".
                "chatsex|onlinesex|adultporn|adultvideo|adultweb.|hardcoresex|hardcoreporn|".
                "teenporn|xxxporn|lesbiansex".
"|online-survey|getonlinesurveysformoney|getonlinesurvey|surveysformoney|Mujeres_Bonitas|Paid_Survey|surveysformoney2015".
"|livegirl|livenude|livesex|livevideo|camgirl|getsurveys|forcash|getsurveysforcash|getsurveysforcash\.com|".
                "spycam|voyeursex|casino-online|online-casino|kontaktlinsen|cheapest-phone|".
                "laser-eye|eye-laser|fuelcellmarket|lasikclinic|cragrats|parishilton|".
                "paris-hilton|paris-tape|2large|fuel-dispenser|fueling-dispenser|huojia|".
                "jinxinghj|telematicsone|telematiksone|a-mortgage|diamondabrasives|".
                "reuterbrook|sex-plugin|sex-zone|lazy-stars|eblja|liuhecai|".
                "buy-viagra|-cialis|-levitra|boy-and-girl-kissing|money|". # These match spammy words
                "tryonlinedatingsites\.comtr\.com|dirare\.com".           # This matches dirare.com a spammer's domain name
              //  "overflow\s*:\s*auto|".   # This matches against overflow:auto (regardless of whitespace on either side of the colon)
              //  "height\s*:\s*[0-4]px|".  # This matches against height:0px (most CSS hidden spam) (regardless of whitespace on either side of the colon)
                //"==<center>\[|".           # This matches some recent spam related to starsearchtool.com and friends
               // "\<\s*a\s*href|".         # This blocks all href links entirely, forcing wiki syntax
              //  "display\s*:\s*none".     # This matches against display:none (regardless of whitespace on either side of the colon)
                "/i";                     # The "/" ends the regular expression and the "i" switch which follows makes the test case-insensitive
                                          # The "\s" matches whitespace
                                          # The "*" is a repeater (zero or more times)
                                          # The "\s*" means to look for 0 or more amount of whitespace

//http://www.mediawiki.org/wiki/Manual:How_to_debug/fr
$wgShowSQLErrors = true;
$wgDebugDumpSql  = true;
register_shutdown_function(function()
{
    if($errors = error_get_last())
    {
        // Should actually log this instead of printing out...
//var_dump($errors);
       //var_dump(debug_backtrace());
//error is an array, nnot  a striong
foreach ($errors as $error)
	
{
error_log($error);
//error_log(debug_backtrace());
}
    
}
});


# This file was automatically generated by the MediaWiki 1.25alpha
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
//	exit;
}
$wgExtraNamespaces =
    array(600 => "Blog", 601 => "Blog_Discussions");
## Uncomment this to disable output compression
 //$wgDisableOutputCompression = true;

$wgSitename = "FunWiKi";
$wgMetaNamespace = "FunWiki";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL

//$wgScriptExtension = "";
## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://wiki.funlab.fr";
//$wgServer = "http://cam.funlab.fr:8081";
$wgScriptPath = "";
## The relative URL path to the skins directory
$wgStylePath = "/skins";
//$wgUsePathInfo = true;
$wgArticlePath="/$1";

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "tuxuntrash@gmail.com";
$wgPasswordSender = "tuxuntrash@gmail.com";

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";


//second base
$wgDBname = "dx";
$wgDBuser = "drx";
$wgDBpassword = "kkjklN";

# MySQL specific settings
$wgDBprefix = "wk_";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Experimental charset support for MySQL 5.0.
$wgDBmysql5 = true;

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from http://commons.wikimedia.org
$wgUseInstantCommons = false;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "fr_FR.utf8";






$wgAuthWPRelPath = '../..';
//mediawiki login by wordpress http://www.mediawiki.org/wiki/Extension:WPMW
//include_once "$IP/extensions/wpmw/AuthWP.php";
//$wgAuth=new AuthWP();
//






## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
//$wgHashedUploadDirectory = false;

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
$wgCacheDirectory = "$IP/cache";
//$wgEnableParserCache = false;
//$wgCachePages = false;


## Shared memory settings
//$wgMemCachedServers = array("127.0.0.1:11000");
//$wgMainCacheType =CACHE_NONE;
//$wgMainCacheType CACHE_MEMCACHED;


# Site language code, should be one of the list in ./languages/Names.php
$wgLanguageCode = "fr";

$wgSecretKey = "cb532hjkaedb7J040c68a81ad917b140039251d5ab8332adee66c2dVGSDGXdhea9";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
//$wgUpgradeKey = "5608c26371c22812";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "http://creativecommons.org/licenses/by-sa/3.0/deed.fr";
$wgRightsText = "Creative Commons paternité – non commercial – partage à l’identique";
$wgRightsIcon = "{$wgResourceBasePath}/core/skins/funlab/cc-by-nc-sa.png";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";




//doit etre avant blog et form?
//require_once "$IP/extensions/openlab/openlab.php";


$wgLogo = "http://wiki.funlab.fr/extensions/openlab/fermer8181586174532.png";






//doit etre avant blog et form!
//need $wgeditor=true
require_once "$IP/extensions/WikiEditor/WikiEditor.php";

$wgUseAjax = true;
$wgAllowUserJs = true;

//require_once "$IP/extensions/Bootstrap/Bootstrap.php";

# The following permissions were set based on your choice in the installer
$wgGroupPermissions['*']['edit'] = false;
//require_once "$IP/skins/MonoBook/MonoBook.php";
//require_once "$IP/skins/funlab/funlab.php";



//require_once "$IP/skins/FunVector/Vector.php";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
//$wgDefaultSkin = "funlab";

require_once "$IP/skins/apex/apex.php";
//require_once "$IP/skins/Blueprint/Blueprint.php";
require_once "$IP/skins/BlueSky/BlueSky.php";
//require_once "$IP/skins/BlueSpiceSkin/BlueSpiceSkin.php";
require_once "$IP/skins/Bouquet/Bouquet.php";

//require_once "$IP/skins/chameleon/Chameleon.php";
require_once "$IP/skins/CologneBlue/CologneBlue.php";
require_once "$IP/skins/Daddio/Daddio.php";
require_once "$IP/skins/DeskMessMirrored/DeskMessMirrored.php";
require_once "$IP/skins/Donate/Donate.php";
require_once "$IP/skins/Dusk/Dusk.php";
require_once "$IP/skins/DuskToDawn/DuskToDawn.php";

//require_once "$IP/skins/Empty/Empty.php";
require_once "$IP/skins/erudite/erudite.php";
require_once "$IP/skins/Example/Example.php";
require_once "$IP/skins/Gamepress/Gamepress.php";
require_once "$IP/skins/GreyStuff/GreyStuff.php";
require_once "$IP/skins/Mask/Mask.php";
//require_once "$IP/skins/mediawiki-strapping/strapping.php";


require_once "$IP/skins/Metrolook/Metrolook.php";
require_once "$IP/skins/Modern/Modern.php";
require_once "$IP/skins/MonoBook/MonoBook.php";
require_once "$IP/skins/Nostalgia/Nostalgia.php";
//require_once "$IP/skins/p2wiki/p2wiki.php";
require_once "$IP/skins/Schulenburg/Schulenburg.php";
require_once "$IP/skins/Slate/Slate.php";




require_once "$IP/skins/Splash/Splash.php";
require_once "$IP/skins/Synagonism/Synagonism.php";
require_once "$IP/skins/Tempo/Tempo.php";
//require_once "$IP/skins/Tomas/Tomas.php";
require_once "$IP/skins/Truglass/Truglass.php";
require_once "$IP/skins/Vector/Vector.php";
require_once "$IP/skins/webplatform/WebPlatform.php";



/*
     Nimbus/       sync-with-gerrit.py*
../             CologneBlue/       erudite/     GreyStuff/            Nostalgia/    Tempo/
apex/           Daddio/            Example/     Mask/                 p2wiki/       Tomas/
Blueprint/      DeskMessMirrored/  Gamepress/   mediawiki-strapping/  Schulenburg/  Truglass/
BlueSky/        Donate/            .git/        Metrolook/            Slate/        Vector/
BlueSpiceSkin/  Dusk/              .gitignore   Modern/               Splash/       webplatform/
Bouquet/        DuskToDawn/        .gitmodules  MonoBook/             Synagonism/
*/

//? reste de skinpernamespace? bah non...
$wgDefaultSkin = "vector";

//$wgUseDatabaseMessages=true;

//$Get_url = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];

//start DATAFABLABO :)!!!?print=p?print=pdf-pagedf-page
//
//
//




$wgRightsUrl = "http://creativecommons.org/licenses/by-sa/3.0/";
$wgRightsText = "a Creative Commons Attribution-ShareAlike 3.0 License";
$wgRightsIcon = "http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-sa.png";
require_once "$IP/extensions/MsUpload/MsUpload.php";

$wgPFEnableStringFunctions = true;
 $wgShowExceptionDetails = true;











require_once( "$IP/extensions/Validator/Validator.php" );






# Enables use of WikiEditor by default but still allow users to disable it in preferences
$wgDefaultUserOptions['usebetatoolbar'] = 1;
//$wgDefaultUserOptions['usebetatoolbar-cgd'] = 1;
 
# Displays the Preview and Changes tabs
//$wgDefaultUserOptions['wikieditor-preview'] = 1;
 
# Displays the Publish and Cancel buttons on the top right side
//$wgDefaultUserOptions['wikieditor-publish'] = 1;










/*****************code/*****************/
//==>
//helper de code:
//<code name="fichier.txt">contenu du fichier </code>

$wgRawHtml=true;


require_once( "$IP/extensions/RawCodeFile/RawCodeFile.php" );


/*****************end code*****************/

//https://github.com/JeroenDeDauw/ExtensionInstaller/blob/master/README.md
//bof:require_once "$IP/extensions/ExtensionInstaller/ExtensionInstaller.php";


require_once( "$IP/extensions/CategoryTree/CategoryTree.php" );
# Enabled Extensions. Most extensions are enabled by including the base extension file here
# but check specific extension documentation for more details
# The following extensions were automatically enabled:

 $wgIncludejQueryMigrate = true;
/*semanticALL!*/
require_once( "$IP/extensions/SemanticBundle/SemanticBundleSettings.php" );
require_once( "$IP/extensions/SemanticBundle/SemanticBundle.php" );
//!require_once "$IP/extensions/SemanticTasks/SemanticTasks.php";
require_once "$IP/extensions/ParserFunctions/ParserFunctions.php";
include_once( "$IP/extensions/SemanticForms/SemanticForms.php" );

require_once( "$IP/extensions/SemanticCompoundQueries/SemanticCompoundQueries.php" );




define("NS_OUTILS", 9122); // This MUST be even.
define("NS_OUTILS_TALK", 9123); // This MUST be the following odd integer.
 define("NS_CNC", 9124); // This MUST be even.
define("NS_CNC_TALK", 9125); // This MUST be the following odd integer.
 /*
$smwgNamespacesWithSemanticLinks[NS_MAIN] = true;
$smwgNamespacesWithSemanticLinks[NS_OUTILS] = true;
$smwgNamespacesWithSemanticLinks[NS_CNC] = true;
end? semantic*/


# End of automatically generated settings.
# Add more configuration options below.


/*blog*/

$wgUserProfileDisplay['stats'] = true;
$wgUserBoard = true;
$wgUserProfileDisplay['board'] = true;
require_once "$IP/extensions/Widgets/Widgets.php";

require_once("$IP/extensions/SocialProfile/SocialProfile.php");
require_once "$IP/extensions/VoteNY/VoteNY.php";
//require_once "$IP/extensions/Comments/Comment.php";

require_once("$IP/extensions/SocialProfile/UserStats/EditCount.php"); // Necessary edit counter
// The actual user level definitions -- key is simple: 'Level name' => points needed
$wgUserLevels = array(
	'Noob' => 0,
	'Récemment inscrit' => 1050,
	'Débutant' => 1750,
	'Amateur' => 2500,
	'Initié' => 5000,
	'Papinoteur!' => 20000,
	'Recrue confirmée' => 10000,
	'Acharné' => 35000,
	'Kamikaze' => 50000,
	'Lieutenant' => 75000,
	'Commandant' => 100000,
	'Colonel' => 150000,
	'007' => 250000,
	'Brigadier General' => 350000,
	'Major General' => 500000,
	'Lieutenant General' => 650000,
	'General' => 800000,
	'Capitaine, oh capitaine!' => 1000000,
);
$wgUserStatsPointValues['view'] = 25; // Points awarded on a mainspace view?
$wgUserStatsPointValues['edit'] = 50; // Points awarded on a mainspace edit
$wgUserStatsPointValues['vote'] = 0; // Points awarded for voting for an article
$wgUserStatsPointValues['comment'] = 50; // Points awarded for leaving a comment
$wgUserStatsPointValues['comment_plus'] = 10; // Points awarded if your comment gets a thumbs up
$wgUserStatsPointValues['comment_ignored'] = 10; // Points awarded if another user ignores your comments
$wgUserStatsPointValues['opinions_created'] = 0; // Points awarded for writing a blog article
$wgUserStatsPointValues['opinions_pub'] = 0; // Points awarded for having that article hit the "Blogs" page
$wgUserStatsPointValues['referral_complete'] = 0; // Points awarded for recruiting a new user
$wgUserStatsPointValues['friend'] = 50; // Points awarded for adding a friend
$wgUserStatsPointValues['foe'] = 50; // Points awarded for adding a foe
$wgUserStatsPointValues['gift_rec'] = 1000; // Points awarded for receiving a gift
$wgUserStatsPointValues['gift_sent'] = 0; // Points awarded for giving a gift
$wgUserStatsPointValues['points_winner_weekly'] = 50; // Points awarded for having the most points for a week
$wgUserStatsPointValues['points_winner_monthly'] = 50; // Points awarded for having the most points for a month
$wgUserStatsPointValues['user_image'] = 1000; // Points awarded for adding your first avatar
$wgUserStatsPointValues['poll_vote'] = 0; // Points awarded for taking a poll
$wgUserStatsPointValues['quiz_points'] = 0; // Points awarded for answering a quiz question
$wgUserStatsPointValues['quiz_created'] = 0; // Points awarded for creating a quiz question
$wgNamespacesForEditPoints = array( 0 ); 
// Array of namespaces that can earn you points. Use numerical keys. Default is 0 -- only main namespace edits can earn a user points.


$wgMaxCustomUserGiftCount=20;
/*
*bug:dans specialcreateblogpage:

	public function displayFormPageText() {
n'$output pas... .= EditPage::getEditToolbar();L221
*/

//require_once "$IP/extensions/BlogPage/Blog.php";
/*that all?*/


include_once("$IP/extensions/NiceCategoryList/NiceCategoryList.php");


/* balise eplite=ID*/
require_once "$IP/extensions/EtherpadLite/EtherpadLite.php";
//end



require_once "$IP/extensions/UserMerge/UserMerge.php";
// By default nobody can use this function, enable for bureaucrat?
$wgGroupPermissions['bureaucrat']['usermerge'] = true;
 
// optional: default is array( 'sysop' )
$wgUserMergeProtectedGroups = array( 'sysop' );




/*WYSIWYGeditor (ck_editorincluded)*/
$wgGroupPermissions['registered_users']['wysiwyg']=true; //juste pour 
require_once "$IP/extensions/WYSIWYG/WYSIWYG.php";


require_once "$IP/extensions/Maps/Maps.php";
//!
//$wgGroupPermissions['*']['wysiwyg']=true; // for all users
/*end wysiwyg*/


/*require_once "$IP/extensions/SkinPerNamespace/SkinPerNamespace.php";
$wgSkinPerNamespace[NS_Blog] = "vector";
//$wgSkinPerNamespace = array("Blog"=>"funlab","FunWiki"=>"funlab");
$wgSkinPerNamespace[NS_FunWiki] = "vector";
$wgSkinPerNamespaceOverrideLoggedIn=true;
*/


//test failed de git
//$egGitHubDefaultRepo = 'tuxun/qtest';



//ConfirmEdit: for captcah on account creation and others page...
//imcompatible avec semantic forms? (a retester on a change de version)$wgGroupPermissions['*'            ]['skipcaptcha'] = true;


if ( 
(strstr($_SERVER["REQUEST_URI"], 'Connexion'))
 OR 
(strstr($_SERVER["REQUEST_URI"], 'signup'))
)
{
require_once "$IP/extensions/ConfirmEdit/ConfirmEdit.php";
//$wgCaptchaClass = 'SimpleCaptcha';

require_once "$IP/extensions/ConfirmEdit/QuestyCaptcha.php";
$wgCaptchaClass = 'QuestyCaptcha';
$arr = array (
        'Quel est le prénom de Didier, notre président? (Didier)' => 'Didier',
        "Quel est le nom de ce wiki (funwiki)?" => "$wgSitename",
        'Dans quelle ville est situé le FabLab de Tours? (Tours)' => 'Tours',
        "Quel est le numéro de département de l'indre et loire? (37):" => '37',
        "De quel couleur est le cheval blanc d'Henri IV? (blanc)" => 'blanc',
);
foreach ( $arr as $key => $value ) {
        $wgCaptchaQuestions[] = array( 'question' => $key, 'answer' => $value );
}/*
*/
//$wgCaptchaTriggersOnNamespace[NS_USER]['addurl'] = true; 
$wgGroupPermissions['*'            ]['skipcaptcha'] = false;
$wgGroupPermissions['user'         ]['skipcaptcha'] = true;
$wgGroupPermissions['autoconfirmed']['skipcaptcha'] = true;
$wgCaptchaTriggers['edit']          = true; 
$wgCaptchaTriggers['create']        = true; 
$wgCaptchaTriggers['createtalk']    = false; 
$wgCaptchaTriggers['addurl']        = true; 
$wgCaptchaTriggers['createaccount'] = true;
$wgCaptchaTriggers['badlogin']      = false;


}

//require_once( "$IP/extensions/SemanticSignup/SemanticSignup.php");
//$egSemanticSignupSettings['useCaptcha'] = true;
$egSemanticSignupSettings['botName'] = 'Funwiki';
$egSemanticSignupSettings['formName'] = 'Laborantin';


//require_once "$IP/maintenance/update.php";
$wgStrictFileExtensions=false;

$wgFileExtensions[] = 'stl';
$wgFileExtensions[] = 'pd';
$wgFileExtensions[] = 'gcod';
$wgFileExtensions[] = 'svg';
$wgFileExtensions[] = 'ino';
$wgFileExtensions[] = 'blend';
$wgFileExtensions[] = 'pde';
$wgFileExtensions[] = 'cpp';
$wgFileExtensions[] = 'pro';
$wgFileExtensions[] = 'ini';
$wgFileExtensions[] = 'gz';
$wgFileExtensions[] = 'bz2';
$wgFileExtensions[] = 'zip';
$wgFileExtensions[] = 'pdf';
$sfgAutocompleteOnAllChars = true;

$wgVerifyMimeType = true;
$wgGroupPermissions['*']['viewedittab'] = true;
//$sfgRenameMainEditTab = true;

require_once("$IP/extensions/ContributionCredits/ContributionCredits.php");
$wgContributionCreditsShowUserSignature = true;

# Enable subpages in the main namespace
$wgNamespacesWithSubpages[NS_MAIN] = true;
 $wgNamespacesWithSubpages = array(
 	NS_TALK => true,
 	NS_USER => true,
 	NS_USER_TALK => true,
 	NS_PROJECT => true,
 	NS_PROJECT_TALK => true,
 	NS_FILE_TALK => true,
 	NS_MEDIAWIKI => true,
 	NS_MEDIAWIKI_TALK => true,
 	NS_TEMPLATE_TALK => true,
 	NS_HELP => true,
	NS_MAIN => true,
 	NS_HELP_TALK => true,
 	NS_CATEGORY_TALK => true
 	);

require_once "$IP/extensions/ContributionScores/ContributionScores.php";
$wgContribScoreIgnoreBots = true;          // Exclude Bots from the reporting - Can be omitted.
$wgContribScoreIgnoreBlockedUsers = true;  // Exclude Blocked Users from the reporting - Can be omitted.
$wgContribScoresUseRealName = true;        // Use real user names when available - Can be omitted. Only for MediaWiki 

$wgContribScoreDisableCache = true; // Set to true to disable cache for parser function and inclusion of 
 
//Each array defines a report - 7,50 is "past 7 days" and "LIMIT 50" - Can be omitted.
$wgContribScoreReports = array(
    array(7,50),
    array(30,50),
    array(0,50));







//require_once "$IP/extensions/NewUserMessage/NewUserMessage.php";
require_once "$IP/extensions/MediaWikiChat/MediaWikiChat.php";

//require_once "$IP/extensions/skinny/Skinny.php";
//require_once "$IP/extensions/booty/Booty.php";
//require_once( "$IP/skins/tweeki/Tweeki.php" );
//$wgDefaultSkin = "tweeki";



} catch (Exception $e) {
    echo 'Exception reçue : ',  $e->getMessage(), "\n";
}
//require_once "$IP/extensions/ImportFromEtherpad/ImportFromEtherpad.php";
$wgUseInstantCommons = true;

require_once "$IP/extensions/WikiLove/WikiLove.php";
$wgDefaultUserOptions['wikilove-enabled'] = 1;



require_once "$IP/extensions/Echo/Echo.php";

require_once "$IP/extensions/Flow/Flow.php";

require_once "$IP/extensions/Thanks/Thanks.php";
$wgFlowOccupyNamespaces = array(NS_TALK);

require_once "$IP/extensions/WhoIsWatching/WhoIsWatching.php";
$wgPageShowWatchingUsers = true;

require_once "$IP/extensions/WhosOnline/WhosOnline.php";


//require_once "$IP/extensions/SVGEdit/SVGEdit.php";
//$wgSVGEditEditor = "http://wiki.funlab.fr/extensions/svgedit/editor/svg-editor.html";

require_once "$IP/extensions/CreatePage/CreatePage.php";

//sert a transformer les pages en pdf
require_once "$IP/extensions/Mpdf/Mpdf.php";

require_once "$IP/extensions/SubPageList3/SubPageList3.php";
/*
require_once "$IP/extensions/PdfHandler/PdfHandler.php";
wfLoadExtension( 'PdfHandler' );
$wgPdfProcessor = '/usr/bin/gs'; 
$wgPdfCreateThumbnailsInJobQueue=true;
$wgPdfPostProcessor = $wgImageMagickConvertCommand; // if defined via ImageMagick
*/
// $wgPdfPostProcessor = '/usr/bin/convert';  // if not defined via ImageMagick
//$wgPdfInfo = '/usr/bin/pdfinfo'; 
//$wgPdftoText = '/usr/bin/pdftotext';
require_once "$IP/extensions/DataTransfer/DataTransfer.php";
//    wfLoadExtension( 'SyntaxHighlight_Pygments' );
  //  wfLoadExtension( 'SyntaxHighlight_GeSHi' );

wfLoadExtension( 'CommonsMetadata' );
wfLoadExtension( 'BetaFeatures' );
require_once "$IP/extensions/MultimediaViewer/MultimediaViewer.php";
$wgEnableMediaViewerForLoggedInUsersOnly=true;

$wgUseImageResize=false;
$wgUpdateCompatibleMetadata=true;
//$wgGenerateThumbnailOnParse=true;
$wgAllowCopyUploads=true;
$wgMaxImageArea=1.8e7;
$wgMaxShellTime=300;
$wgMaxShellFileSize=212000;
$wgMemoryLimit="50M";


require_once "$IP/extensions/Babel/Babel.php";
require_once "$IP/extensions/cldr/cldr.php";
//require_once "$IP/extensions/CleanChanges/CleanChanges.php";

$wgCCTrailerFilter = false;
$wgCCUserFilter = false;
$wgDefaultUserOptions['usenewrc'] = 0;

require_once "$IP/extensions/LocalisationUpdate/LocalisationUpdate.php";
$wgLocalisationUpdateDirectory = "$IP/cache";
require_once "$IP/extensions/Translate/Translate.php";

$wgGroupPermissions['user']['translate'] = true;
$wgGroupPermissions['user']['translate-messagereview'] = true;
$wgGroupPermissions['user']['translate-groupreview'] = true;
$wgGroupPermissions['user']['translate-import'] = true;
$wgGroupPermissions['sysop']['pagetranslation'] = true;
$wgGroupPermissions['sysop']['translate-manage'] = true;
$wgTranslateDocumentationLanguageCode = 'qqq';
$wgExtraLanguageNames['qqq'] = 'Message documentation'; # No linguistic 
//content. Used for documenting messages
//$smwgQConceptCaching=CONCEPT_CACHE_NONE;
$wgGroupPermissions['translator']['skipcaptcha'] = true; // Bug 34182: needed with ConfirmEdit
$smwgShowFactbox = SMW_FACTBOX_NONEMPTY;
require_once 
"$IP/extensions/UniversalLanguageSelector/UniversalLanguageSelector.php";

$wgAllowExternalImages=true;
require_once "$IP/extensions/timeline/Timeline.php"; // Add EasyTimeline extension
$fontFile = 'ascii'; // Use the internal Ploticus font
$wgTimelineSettings->ploticusCommand = "/home/didier3d/www/funlab.fr/core/extensions/pl"; // alternate location of ploticus, depending on OS
wfLoadExtension( 'ContentTranslation' );
wfLoadExtension( 'TemplateData' );
// Set this to true to enable the TemplateData GUI editor
$wgTemplateDataUseGUI = true;

wfLoadExtension( 'CodeEditor' );


require_once "$IP/extensions/Scribunto/Scribunto.php";
$wgScribuntoDefaultEngine = 'luastandalone';

$smwgLinksInValues=false;


$wgEnableUploads = true;
$wgUseImageMagick = true;

require_once( "$IP/extensions/UploadWizard/UploadWizard.php" );
$wgApiFrameOptions = 'SAMEORIGIN';

$wgExtensionFunctions[] = function() {
	$GLOBALS['wgUploadNavigationUrl'] = SpecialPage::getTitleFor( 'UploadWizard' )->getLocalURL();
	return true;
};

$wgUploadWizardConfig = array(
	'debug' => true,
	'autoAdd' => array(
	 	'wikitext' => array( 'This file was uploaded with the UploadWizard extension.' ),
	),
	'feedbackPage' => 'Feedback about UploadWizard',
	'altUploadForm' => 'Special:Upload',
	'fallbackToAltUploadForm' => true,
	'enableFormData' => true,  # Should FileAPI uploads be used on supported browsers?
	'enableMultipleFiles' => true,
	'enableMultiFileSelect' => false,
	'tutorial' => array(
	 	'skip' => false
	),
        'fileExtensions' => $wgFileExtensions //omitting this can cause errors
);







